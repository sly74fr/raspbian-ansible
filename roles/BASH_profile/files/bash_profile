# .bash_profile

# User specific environment and startup programs

# Personnal prompt setup
PS1="\[\033[7m\][\u@\h: \w - \t]\[\033[0m\] \$ "

# Personnal HISTORY setup
export HISTCONTROL=ignorespace:ignoredups:erasedups
export HISTTIMEFORMAT="[%F %T] "
export HISTIGNORE="ls:ll:pwd:bg:fg:history:top"
export HISTFILESIZE=10000000
export HISTSIZE=100000
shopt -s histappend

#####################
# Personnal aliases #
#####################
alias l='LL_OR_CAT'
alias ll='ls -lh'
alias lll='ls -laih'
alias mkcd='MAKE_DIR_AND_MOVE_IN'
alias rm='rm -i'
alias r='rm'
alias rr='RECURSIVE_REMOVE'
alias g='grep -ain'
alias gr='g -r'
alias s='SEARCH'
alias swap='SWAP_2_FILES'
alias c='CD_AND_LL_OR_CAT'
alias c-='cd - && ll'
alias ..='c ..'
alias ,,='c ..'
alias ...='c ../..'
alias ....='c ../../..'
alias .....='c ../../../..'
alias ......='c ../../../../..'
alias .......='c ../../../../../..'
alias treee='pwd;find . -path ./node_modules -prune -o -print | sort | sed '\''1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/| /g'\'''
alias du='du -sh'
alias df='df -h'
alias quit='kill -15'
alias psx='ps -x'
alias psg='ps -x | grep'
alias psa='ps -aef'
alias psag='ps -aef | grep'
alias ht='htop -t -d 0.5'
alias tf='tail -f'
alias h='HISTORY_SEARCH'
alias hg='history | grep'
alias ha='history -a'
alias he='HISTORY_EDIT'
alias hl='history -r'
alias dt='date "+%Y.%m.%d.%H.%M.%S"'
alias cmp='tar cvzf ../`basename $PWD`_`dt`.tgz ./'
#alias make='make -j'

#######################
# Personnal Functions #
#######################
HALT_TO_CONFIRM()
{
    MSG="Please confirm"
    if [ $# -gt 0 ]; then
        MSG=$1
    fi

    LEN=`expr $(echo ${#MSG}) + 4`

    printf "%${LEN}s\n" '' | tr '[:blank:]' '~'
    echo -n "$MSG ???"

    read
    printf "%${LEN}s\n" '' | tr '[:blank:]' '~'
}

LL_OR_CAT()
{
    if [ $# -eq 0 ]; then
        ll
    else
        if [ -d "$1" ]; then
            ll $1
        else
            cat -v $1
        fi
    fi
}
CD_AND_LL() { cd "$@" && ll; }
CD_AND_LL_OR_CAT()
{
    if [ $# -eq 0 ]; then
        ll
    else
        if [ -d "$1" ]; then
            CD_AND_LL $1 #ll $1
        else
            cat -v $1
        fi
    fi
}
MAKE_DIR_AND_MOVE_IN() { mkdir -p "$1" && cd "$1"; }
RECURSIVE_REMOVE()
{
    if [ ! -e "$1" ]; then
        echo "File not found"
        return 1
    fi
    ll $@
    HALT_TO_CONFIRM "RECURSIVELY Delete" && rm -rf $@
}

HISTORY_EDIT()
{
    history -a
    vi ~/.bash_history
    history -r
}
HISTORY_SEARCH()
{
    eval LAST_ARG=\${$#}
    eval ARGS_REST=\${*%${!#}}

    if [ $# -le 0 ]; then
        history | awk '{$1=""; print substr($0, 2, length($0))}'
    else
        h $ARGS_REST | grep $LAST_ARG
    fi
}

SWAP_2_FILES()
{
    if [ $# -lt 2 ]; then
        echo "usage: swap file1 file2"
        return 1
    fi

    if [ ! -f "${1}" ]; then
        echo "swap: '${1}' file does not exist, exiting..."
        return 1
    fi

    if [ ! -f "${2}" ]; then
        echo "swap: '${2}' file does not exist, exiting..."
        return 1
    fi

    TMPFILE=`mktemp -q /${TMPDIR}/swap.XXXXXX`
    if [ $? -ne 0 ]; then
        echo "swap: Can't create '${TMPFILE}' temp file, exiting..."
        return 1
    fi

    mv -f ${1} ${TMPFILE} && mv ${2} ${1} && mv ${TMPFILE} ${2};
    if [ $? -ne 0 ]; then
        echo "swap: Can't swap files '${1}' and '${2}', exiting..."
        return 1
    fi

    return 0
}

# Reversed arg order grep
SEARCH()
{
    PATHES="."
    if [ $# -gt 1 ]; then
        eval PATHES=\${*%${!#}}
    fi
    eval TOKEN=\${$#}
    gr $TOKEN $PATHES
}

#######
# GIT #
#######
alias ghh='GIT_HELP'
alias gst='git status --column'
alias glo='git log --graph --all --decorate --date-order --name-status'
alias gls='git log --oneline --all'
alias gdi='git diff'
alias gdc='git diff --cached'
alias gad='git add'
alias gap='git add -p'
alias gci='git commit -v -p'
alias gce='git commit -v'
alias gca='git commit --amend'
alias gcp='git cherry-pick'
alias gco='git checkout'
alias gbl='git branch -vv'
alias gbr='git branch -avv'
alias gbd='gbr && HALT_TO_CONFIRM "Delete" && git branch -D'
alias grv='git remote -v'
alias gru='gbr && HALT_TO_CONFIRM "Prune" && git remote update origin --prune'
alias gpu='git push --set-upstream origin'
alias gph='GIT_PUSH'
alias gpl='git pull -v --dry-run && HALT_TO_CONFIRM "Pull" && git pull'
alias gsh='git stash -h'
alias gsl='git stash list'
alias gsv='git stash show -v'
alias gsa='git stash push'
alias gsg='gsl && HALT_TO_CONFIRM "Pop" && git stash pop'
alias gsr='gsl && HALT_TO_CONFIRM "Drop" && git stash drop'
alias gus='HALT_TO_CONFIRM "Unstage" && git restore --staged'
alias gwc='GIT_SRC_LINES_OF_CODE'
alias gso='GIT_SHOW_COMMIT'
alias guc='GIT_UNDO_COMMIT'
GIT_HELP()
{
    if [ $# -eq 0 ]; then
        alias | grep "alias g[a-z][a-z]='" | sed "s/alias //g" | sed "s/=/ = /g" | tr -d "'"
    else
        git help $1
    fi
}
# Displays lines of code per file in git repo and sum of all. Only looks for files in src directory.
GIT_SRC_LINES_OF_CODE()
{
    git ls-files \
        | xargs file \
        | grep text \
        | grep -o ^.*: \
        | tr -d ":" \
        | grep ^src/.* \
        | xargs wc -l 
}
GIT_SHOW_COMMIT()
{
    if [ $# -lt 1 ]; then
        gso HEAD
    else
        git show $@
    fi
}
GIT_UNDO_COMMIT()
{
    if [ $# -lt 1 ]; then
        guc HEAD~1
    else
        gso $1
        HALT_TO_CONFIRM "Undo commit"
        git reset --soft $1
    fi
}
GIT_PUSH()
{
    git push -v -n $1
    HALT_TO_CONFIRM "Push"
    git push $1
}

#############################
# Machine specific settings #
#############################
